
server {
    server_name stocas.${DOMAIN};
    listen 80;

    location ^~ / {
        gzip_static on;
        include proxy_params;
        proxy_pass http://dashboard:${DASHBOARD_PORT};
    }

    location ~ /mattermost/api/v[0-9]+/(users/)?websocket$ {
        proxy_set_header Upgrade ${DOLLAR}http_upgrade;
        proxy_set_header Connection "upgrade";
        client_body_timeout 60;
        send_timeout 300;
        lingering_timeout 5;
        proxy_connect_timeout 90;
        proxy_send_timeout 300;
        proxy_read_timeout 90s;
        include mattermost_params;
        proxy_pass http://mattermost:${MATTERMOST_PORT};
    }

    location /mattermost {
        proxy_set_header Connection "";
        proxy_read_timeout 600s;
        include mattermost_params;
        proxy_pass http://mattermost:${MATTERMOST_PORT};
    }

    location /logger/ {
        proxy_pass http://logger:${LOGGER_PORT};
    }

    location ~ /sonarqube {
        proxy_set_header   X-Real-IP ${DOLLAR}remote_addr;
        proxy_set_header   Host      ${DOLLAR}http_host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_pass http://sonarqube:${SONARQUBE_PORT};
        add_header 'Access-Control-Allow-Origin' '*' always;
        if (${DOLLAR}request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,authorization';
        #
        # Tell client that this pre-flight info is valid for 20 days
        #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if (${DOLLAR}request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,authorization';
        }
        if (${DOLLAR}request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,authorization';
        }
     }

    location ~ /jenkins {
        proxy_pass http://jenkins:${JENKINS_PORT};
        proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
        proxy_set_header Host ${DOLLAR}host;
        proxy_redirect   off;
        proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
    }

}


server {
    server_name gitlab.${DOMAIN};
    listen 80;

    location / {
        proxy_pass http://gitlab:${GITLAB_PORT};
        proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
        proxy_set_header Host ${DOLLAR}host;
        proxy_redirect   off;
        proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
    }
}


server {
    server_name taiga.${DOMAIN};
    listen 80;
    
    location ^~ /events {
        proxy_pass http://taiga-events:${TAIGA_EVENTS_PORT}/events;
        proxy_http_version 1.1;
        proxy_set_header Upgrade ${DOLLAR}http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
    }
    location ^~ /api/ {
        proxy_pass http://taiga-back:${TAIGA_BACK_PORT}/api/;
        include proxy_params;
    }

    location ^~ /admin/ {
        proxy_pass http://taiga-back:${TAIGA_BACK_PORT}/admin/;
        include proxy_params;
    }

    # Static
    location ^~ /static/ {
        alias /taiga/static/;
    }
    # Media
    location ^~ /_protected/ {
        internal;
        alias /taiga/media/;
        add_header Content-disposition "attachment";
    }
    # Unprotected section
    location ^~ /media/exports/ {
        alias /taiga/media/exports/;
        add_header Content-disposition "attachment";
    }

    location ^~ /media/ {
        proxy_pass http://taiga-protected:${TAIGA_PROTECTED_PORT}/;
        include proxy_params;
    }

    location ^~ / {
        proxy_pass http://taiga-front:${TAIGA_FRONT_PORT}/;
        include proxy_params;
    }
}

server {
    server_name: ${DOMAIN};
    listen 80;

    location ^~ / {

    }

}
