version: '3.7'

x-environment:
  &default-back-environment
  # These environment variables will be used by taiga-back and taiga-async.
  # Database settings
  POSTGRES_DB: "taiga"
  POSTGRES_USER: "${POSTGRES_USER}"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
  POSTGRES_HOST: "taiga-db"
  # Taiga settings
  TAIGA_SECRET_KEY: "${SECRET_KEY}"
  TAIGA_SITES_SCHEME: "${TAIGA_SCHEME}"
  TAIGA_SITES_DOMAIN: "${TAIGA_DOMAIN}"
  TAIGA_SUBPATH: "${SUBPATH}"
  # Email settings.
  EMAIL_BACKEND: "django.core.mail.backends.${EMAIL_BACKEND}.EmailBackend"
  DEFAULT_FROM_EMAIL: "${EMAIL_DEFAULT_FROM}"
  EMAIL_USE_TLS: "${EMAIL_USE_TLS}"
  EMAIL_USE_SSL: "${EMAIL_USE_SSL}"
  EMAIL_HOST: "${EMAIL_HOST}"
  EMAIL_PORT: "${EMAIL_PORT}"
  EMAIL_HOST_USER: "${EMAIL_HOST_USER}"
  EMAIL_HOST_PASSWORD: "${EMAIL_HOST_PASSWORD}"
  # Rabbitmq settings
  RABBITMQ_USER: "${RABBITMQ_USER}"
  RABBITMQ_PASS: "${RABBITMQ_PASS}"
  # Telemetry settings
  ENABLE_TELEMETRY: "${ENABLE_TELEMETRY}"
  # ...your customizations go here
  PUBLIC_REGISTER_ENABLED: "True"
  ## to enable http
  SESSION_COOKIE_SECURE: "False"
  CSRF_COOKIE_SECURE: "False"

x-volumes:
  &default-back-volumes
  # These volumens will be used by taiga-back and taiga-async.
  - taiga-static-data:/taiga-back/static
  - taiga-media-data:/taiga-back/media
  # - ./config.py:/taiga-back/settings/config.py


services:
#DASHBOARD
  dashboard:
    container_name: dashboard
    tty: true
    restart: unless-stopped
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - 5000:3000

#GITLAB
  gitlab:
    container_name: gitlab
    hostname: 'gitlab.example.com'
    image: 'gitlab/gitlab-ee:latest'
    restart: unless-stopped
    #restart: always #video
    environment:
      #external_url 'http://localhost/gitlab' #old
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://35.199.160.189'
        gitlab_rails['gitlab_shell_ssh_port'] = 2224
        letsencrypt['enable'] = false
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
    networks:
      - gitlab
    ports:
      - '9001:80'
      - '443:443'
      - '2224:22'
    volumes:
      - $GITLAB_HOME/config:/etc/gitlab
      - $GITLAB_HOME/logs:/var/log/gitlab
      - $GITLAB_HOME/data:/var/opt/gitlab
    shm_size: '256m'

#JENKINS
  jenkins:
    container_name: jenkins
    image: jenkins/jenkins:lts
    privileged: true
    restart: unless-stopped
    user: root
    environment:
      - JENKINS_OPTS="--prefix=/jenkins"
    ports:
      -  9005:8080
      -  50000:50000
    volumes:
      - /etc/default/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/local/bin/docker:/usr/local/bin/docker

#LOGGER

  mongodb:
    image: mongo:4.0.6
    container_name: logger_mongodb
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=logger
    networks:
      - default
    volumes:
      # seeding scripts
      - logger_entrypoint:/docker-entrypoint-initdb.d
      # named volumes
      - logger_data:/docker-logger/data/db
      - logger_conf:/docker-logger/data/configdb

  logger:
    container_name: logger
    # build will get tagged with 'image'
    build:
      context: ./docker-logger/logger
      args:
          - SECRET_KEY=secret-key
          - SECURITY_PASSWORD_SALT=a324agfh[z
          - SECRET_DB_NAME=logger
    image: cas.logger:1.0
    depends_on:
      - mongodb
    networks:
      - default
    ports:
      - 8120:8120
    restart: always

#MATTERMOST
  db:
    container_name: matter-db
    build: ./docker-mattermost/db
    read_only: true
    restart: unless-stopped
    env_file:
      - ./configs/mattermost.env
    networks:
      - default
    volumes:
      - mattermost_db:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro

  app:
    container_name: mattermost
    restart: unless-stopped
    build:
      context: ./docker-mattermost/app
    env_file:
      - ./configs/mattermost.env
    networks:
      - default
    ports:
      - "9013:8000"
    volumes:
      - mattermost_config:/mattermost/config:rw
      - mattermost_data:/mattermost/data:rw
      - mattermost_logs:/mattermost/logs:rw
      - mattermost_plugins:/mattermost/plugins:rw
      - mattermost_client_plugins:/mattermost/client/plugins:rw
      - /etc/localtime:/etc/localtime:ro
      - ./docker-mattermost/config:/config
      # When you want to use SSO with GitLab, you have to add the cert pki chain of GitLab inside Alpine
      # to avoid Token request failed: certificate signed by unknown authority (link: https://github.com/mattermost/mattermost-server/issues/13059)
      # - <path_to_your_gitlab_pki>/pki_chain.pem:/etc/ssl/certs/pki_chain.pem:ro

#SONARQUBE
  sonarqube:
    container_name: sonarqube
    image: sonarqube:8-community
    restart: unless-stopped
    depends_on:
      - sonar-db
    env_file:
      - ./configs/sonar.env
    networks:
      - default
    ports:
      - 9000:9000
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs

  sonar-db:
    container_name: sonar-db
    image: postgres:12
    restart: unless-stopped
    env_file:
      - ./configs/sonar.env
    networks:
      - default
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

#TAIGA
  taiga-db:
    image: postgres:12.3
    container_name: taiga-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: "taiga"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 15s
      retries: 5
      start_period: 3s
    volumes:
      - taiga-db-data:/var/lib/postgresql/data
    networks:
      - taiga

  taiga-back:
    image: taigaio/taiga-back:latest
    container_name: taiga-back
    environment: *default-back-environment
    volumes: *default-back-volumes
    networks:
      - taiga
    depends_on:
      taiga-db:
        condition: service_healthy
      taiga-events-rabbitmq:
        condition: service_started
      taiga-async-rabbitmq:
        condition: service_started

  taiga-async:
    image: taigaio/taiga-back:latest
    entrypoint: ["/taiga-back/docker/async_entrypoint.sh"]
    environment: *default-back-environment
    volumes: *default-back-volumes
    networks:
      - taiga
    depends_on:
      taiga-db:
        condition: service_healthy
      taiga-events-rabbitmq:
        condition: service_started
      taiga-async-rabbitmq:
        condition: service_started

  taiga-async-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    environment:
      RABBITMQ_ERLANG_COOKIE: "${RABBITMQ_ERLANG_COOKIE}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_VHOST}"
    hostname: "taiga-async-rabbitmq"
    volumes:
      - taiga-async-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - taiga

  taiga-front:
    image: taigaio/taiga-front:latest
    container_name: taiga-front
    restart: unless-stopped
    environment:
      TAIGA_URL: "${TAIGA_SCHEME}://${TAIGA_DOMAIN}"
      TAIGA_WEBSOCKETS_URL: "${WEBSOCKETS_SCHEME}://${TAIGA_DOMAIN}"
      TAIGA_SUBPATH: "${SUBPATH}"
      # ...your customizations go here
      PUBLIC_REGISTER_ENABLED: "true"
    networks:
      - taiga
    # volumes:
    #   - ./conf.json:/usr/share/nginx/html/conf.json

  taiga-events:
    image: taigaio/taiga-events:latest
    container_name: taiga-events
    restart: unless-stopped
    environment:
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASS: "${RABBITMQ_PASS}"
      TAIGA_SECRET_KEY: "${SECRET_KEY}"
    networks:
      - taiga
    depends_on:
      taiga-events-rabbitmq:
        condition: service_started

  taiga-events-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: taiga-rabbit
    restart: unless-stopped
    environment:
      RABBITMQ_ERLANG_COOKIE: "${RABBITMQ_ERLANG_COOKIE}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_VHOST}"
    hostname: "taiga-events-rabbitmq"
    volumes:
      - taiga-events-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - taiga

  taiga-protected:
    image: taigaio/taiga-protected:latest
    environment:
      MAX_AGE: "${ATTACHMENTS_MAX_AGE}"
      SECRET_KEY: "${SECRET_KEY}"
    networks:
      - taiga

  taiga-gateway:
    image: nginx:1.19-alpine
    ports:
      - "80:80" #9000:80
    volumes:
      - ./configs/taiga.conf:/etc/nginx/conf.d/default.conf
      - taiga-static-data:/taiga/static
      - taiga-media-data:/taiga/media
    networks:
      - taiga
    depends_on:
      - taiga-front
      - taiga-back
      - taiga-events

#NGINX
  nginx:
    container_name: nginx
    build:
      context: ./docker-nginx
      dockerfile: Dockerfile
    networks:
      - default
    ports:
      - "8998:80"
      - "443:443"
    restart: always
    volumes:
      - /etc/letsencrypt/:/etc/letsencrypt/

volumes:
  # default dir on Ubuntu: /var/lib/docker/volumes
  logger_data:
  logger_conf:
  logger_entrypoint:
  #sonarqube dirs
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data:
  #taiga dirs
  taiga-static-data:
  taiga-media-data:
  taiga-db-data:
  taiga-async-rabbitmq-data:
  taiga-events-rabbitmq-data:
  #GitLab
  gitlab_data:
  gitlab_config:
  gitlab_logs:
  #mattermost
  mattermost_db:
  mattermost_config:
  mattermost_data:
  mattermost_logs:
  mattermost_plugins:
  mattermost_client_plugins:

networks:
  taiga:
  gitlab:
    name: gitlab-network