version: '3.7'

services:
#DASHBOARD
  dashboard:
    container_name: dashboard
    tty: true
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 4096M
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - 5000:3000

#GITLAB
  gitlab:
    container_name: gitlab
    image: 'gitlab/gitlab-ee:latest'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 5120M
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://localhost/gitlab'
        gitlab_rails['gitlab_shell_ssh_port'] = 2224
        letsencrypt['enable'] = false
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
    networks:
      - default
    ports:
      - '9001:80'
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab

#JENKINS
  jenkins:
    container_name: jenkins
    image: jenkins/jenkins:lts
    privileged: true
    restart: unless-stopped
    user: root
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    environment:
      - JENKINS_OPTS="--prefix=/jenkins"
    ports:
      -  8080:8080
      -  50000:50000
    volumes:
      - /etc/default/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/local/bin/docker:/usr/local/bin/docker

#LOGGER

  mongodb:
    image: mongo:4.0.6
    container_name: logger_mongodb
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    environment:
      - MONGO_INITDB_DATABASE=logger
    networks:
      - default
    volumes:
      # seeding scripts
      - logger_entrypoint:/docker-entrypoint-initdb.d
      # named volumes
      - logger_data:/docker-logger/data/db
      - logger_conf:/docker-logger/data/configdb

  logger:
    container_name: logger
    # build will get tagged with 'image'
    build:
      context: ./docker-logger/logger
      args:
          - SECRET_KEY=secret-key
          - SECURITY_PASSWORD_SALT=a324agfh[z
          - SECRET_DB_NAME=logger
    image: cas.logger:1.0
    depends_on:
      - mongodb
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    networks:
      - default
    restart: always

#MATTERMOST
  db:
    container_name: matter-db
    build: ./docker-mattermost/db
    read_only: true
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    env_file:
      - ./configs/mattermost.env
    networks:
      - default
    volumes:
      - mattermost_db:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro

  app:
    container_name: mattermost
    restart: unless-stopped
    build:
      context: ./docker-mattermost/app
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    env_file:
      - ./configs/mattermost.env
    networks:
      - default
    volumes:
      - mattermost_config:/mattermost/config:rw
      - mattermost_data:/mattermost/data:rw
      - mattermost_logs:/mattermost/logs:rw
      - mattermost_plugins:/mattermost/plugins:rw
      - mattermost_client_plugins:/mattermost/client/plugins:rw
      - /etc/localtime:/etc/localtime:ro
      - ./docker-mattermost/config:/config
      # When you want to use SSO with GitLab, you have to add the cert pki chain of GitLab inside Alpine
      # to avoid Token request failed: certificate signed by unknown authority (link: https://github.com/mattermost/mattermost-server/issues/13059)
      # - <path_to_your_gitlab_pki>/pki_chain.pem:/etc/ssl/certs/pki_chain.pem:ro

#SONARQUBE
  sonarqube:
    container_name: sonarqube
    image: sonarqube:8-community
    restart: unless-stopped
    depends_on:
      - sonar-db
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2048M
    env_file:
      - ./configs/sonar.env
    networks:
      - default
    ports:
      - 9000:9000
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs

  sonar-db:
    container_name: sonar-db
    image: postgres:12
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    env_file:
      - ./configs/sonar.env
    networks:
      - default
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

#TAIGA
  back:
    image: dockertaiga/back:6.0.1
    container_name: taiga-back
    restart: unless-stopped
    depends_on:
      - taiga-db
      - events
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M
    env_file:
      - ./configs/taiga.env
    networks:
      - default
    volumes:
      - taiga_data:/taiga-media
      - taiga_conf_back:/taiga-conf

  front:
    image: dockertaiga/front:6.0.1
    container_name: taiga-front
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1536M
    env_file:
      - ./configs/taiga.env
    networks:
      - default
    volumes:
      - taiga_conf_front:/taiga-conf

  events:
    image: dockertaiga/events:6.0.0
    container_name: taiga-events
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    depends_on:
      - rabbit
    env_file:
      - ./configs/taiga.env
    networks:
      - default

  taiga-db:
    image: postgres:12-alpine
    container_name: taiga-db
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    env_file:
      - ./configs/taiga.env
    networks:
      - default
    volumes:
      - taiga_db:/var/lib/postgresql/data

  rabbit:
    image: dockertaiga/rabbit
    container_name: taiga-rabbit
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    env_file:
      - ./configs/taiga.env
    networks:
      - default

#NGINX
  nginx:
    container_name: nginx
    build:
      context: ./docker-nginx
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    networks:
      - default
    ports:
      - "8084:80"
      - "443:443"
    restart: always
    volumes:
      - .:/usr/share/nginx/html
      - /etc/letsencrypt/:/etc/letsencrypt/

volumes:
  # default dir on Ubuntu: /var/lib/docker/volumes
  logger_data:
  logger_conf:
  logger_entrypoint:
  #sonarqube dirs
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data:
  #taiga dirs
  taiga_db:
  taiga_data:
  taiga_conf_front:
  taiga_conf_back:
  #GitLab
  gitlab_data:
  gitlab_config:
  gitlab_logs:
  #mattermost
  mattermost_db:
  mattermost_config:
  mattermost_data:
  mattermost_logs:
  mattermost_plugins:
  mattermost_client_plugins:
